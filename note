js
-----------
node js:javascript run time environment and js library
2 types of data
primitive-they store simple value
----------
number-any number
string-text or word
boolean-true or false
undefined-variable with no value yet
null-no value
bigInt-very big integer
symbol-to create unique identifier
non-primitive-they store complex value
-------------
object


-To check type of data use 'typeof'keyword
-console.log() used to display content
-creating variable in js
variable:to store data
-using var keyword
-using const keyword
-using let keyword
-identifier:unique value,class,variable,function etc
-rules of creating identifier
-can have letters digits and underscore
-start with either letters or underscore
-keyword cannot be used as identifier

-hoisting:accessing variable/fjunction before decleration
var
----
-creating using var keyword
-re-assign with any type of value
-global scope
-hoisted with a value undefined


const
------
-use const keyword
-cannot reasign with values
-block scope

let
-----
-use let keyword
-can reassign its value
-hoisted without value
-block scope

operator
-------
assign...
arith...
relatio....
logical...

increment(++) or decrement(--)

-shorthand operators:+=,-+,*=,/=

-joining different types of data in js
-using (,)
-using concantination operator(+)
-using template litterals

-spread:(..):used to combine iterativing variable into a single variable

-condition statement in js
==========================
if,else if ladder,if else,switch
switch
=======
switch(exp){
    case a: statement
    case b:statement
    default:statement
}

looping statement in js
========================
-while loop
syntax:inialize a variable
while(condition){
    -statement to be executed
   - while condition become true
   -update iterating variable
}
-for loop
syntx:
for(init..variable;condition;update variable){
    body of the loop
}

functions in js
-------------------
to perform specific task during the code
2parts-
function definition-defining the task to be performed
syntx:function function-name(parameters){
    function body
}
-function call:to execute
syntx:function-name(arguments)

types of function
--------------------
-arrow function-alternative of function
defition
syntx:function_name=(parameters)=>{
    functon body
}
-pre defined functions
ex:console.log(),math.ceil(),math.floor()
-callback function: a
function definition inside a function call.completes its execution only after the completion of functon inside it.

-nested function-a function definition inside another function definition


-reccurssive function:calling a function inside its own function
array
=======
    -array-to hold multiple values in a single variable
    types of an array in an object
    -to find the total number of elements in an array use 'length' property
    syntx:array-name.length
    -to access an array elementsuse its index value
    syntx:array-name[index]
    -accessing array elements
    -using normal forloop
    -using for of loop
    -using for-in loop

    -array methods-pre defined method of manipulate array data

    -push(item):to add an item at the end of an array
    -unshift(item):to add an item at the first of an array
    -pop(: to remove last element)
    -shift:to remove first element
    -sort(compare fn):to sort an array
    compare fn:(num1,num2)=>num1-num2 :asending
        compare fn:(num1,num2)=>num2-num1 :asending
    for each():(callbackfn:(value,index,array)=>void):alternative of for -of-loop
    -filter(callbackfn:(value,index,array)=>[]):return an array with elements satisfying the condition from an existing array
    -find(callback):return an item satisfying the condition from an existingarray
    -map:return a new array with values after applying a mapping function to existing array
    -reduce(callback,initialvalue)
    -callback:(required):a function executed on each element
    -callback(accumulator(to store),currentvalue,currentvalue,currrentindex,array)
    -some(callback)
    flat-return an array with corresponding depth as diamension
    -includes(item):return boolean based on the item present the array
    -indexof(item):return index value corresponding to the item
    -splice(startingIndex,deletecount):to remove array elementsuse
    -join(seperator):used to join alll join all elements of an array into single string
    string
    ==========
    -content that put in "or''
    -string method
    -substring(startingindex,endingindex)
    startswith,endswith,uppercase,lowercase,trim:to remove white space,split:used to split a string into an array of substring,based on specified operator
    -slice:(startingIndex,EndingIndex):to get substring from a string
-object:used to store multiple data in a single variable.data stored as key:value pair
ex:object_name={key:value,keyvalue...}
key:to access data from an object
syntax:object_name["key"]/object_name.key
-used to check a key present in an object or not 
use,'in' operator
syntax:key in object_name,return boolean value
-hasOwnProperty(key)
-object.values(object_name) : return an array , which contain values in object 
-object.keys(object_name) : return an array , which contain keys in object 
-object.assign(object_name{key:value}) : to insert data to an object

OOPS
----------
oops stands for object oriented programming,it is a programming style where codes you organise code into
    object-that hold:
    -Data:called properties(ex: name,age,price...)
    -behaviors: called methods(function that work on data)
    -core concept
    -class:blue print/template for creating object
    -object:a real word entity created from the class
    -constructor:a method is used to intialise class property at the time of an creation
    -reference:'this ' keyword:  